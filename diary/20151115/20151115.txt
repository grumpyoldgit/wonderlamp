okay so we want to take a better shot at this.

This time we'll use:

Cat5 ethernet cable, with rj45 connectors to connect head to sensors.
Serial communication from the sensors to the beaglebone black (it can support 4 serial ports!!).
The 'enable' pin to the sensors will go across the ethernet connector too.
Power will also go over the cat5

So we want every pair to have one cable going to ground, and then since we have four pairs, that's
- Rx
- Tx
- Enable
- Power

Cat5 uses 22 to 26 AWG, which have 16.14 ohms per 1000ft and 40.81 ohms per 1000 ft respectively, so we need the device to be able to function with that in series with the power circuit.

It will operate from 2.2v to 5.5 volts so given a 5 volt input, to not work over 1000 ft, the potential drop over the cable would have to use 5-2.2=2.8 volts which is over a 50 ohm cable, meaning that it would have to have 2.8/50 = 0.0559 amps, or 56 milliamps meaning it was using 0.0559*2.8 = 0.156 milliwatts.

In short, I think we're going to be okay.


So, the pins are (from http://beaglebone.cameon.net/home/serial-ports-uart):


         Rx      Tx      CTS     RTS     Device

UART1    P9_26   P9_24   P9_20   P9_19   /dev/ttyO1	 
UART2    P9_22   P9_21   P8_37   P8_38   /dev/ttyO2	 
UART4    P9_11   P9_13   P8_35   P8_33   /dev/ttyO4	 
UART5    P8_38   P8_37   P8_31   P8_32   /dev/ttyO5	 

CTS == Clear To Send (flagged when the sensor has data to send)
RTS == Ready To Send (flagged when the computer has data to send)

Hm... I wonder if you can 'trigger' the sensor via the TX port rather than by raising the pin..


Pinout description of sensors:

Pin Out Description
Pin 1-BW-*Leave open or hold low for serial output on the TX output. When BW pin is held high the TX output sends a pulse (instead of serial data), suitable for low noise chaining.
Pin 2-PW- This pin outputs a pulse width representation of range. The distance can be calculated using the scale factor of 147uS per inch.
Pin 3-AN- Outputs analog voltage with a scaling factor of (Vcc/512) per inch. A supply of 5V yields ~9.8mV/in. and 3.3V yields ~6.4mV/in. The output is buffered and corresponds to the most recent range data.
Pin 4-RX– This pin is internally pulled high. The LV-MaxSonar-EZ will continually measure range and output if RX data is left unconnected or held high. If held low the sensor will stop ranging. Bring high for 20uS or more to command a range reading.
Pin 5-TX- When the *BW is open or held low, the TX output delivers asynchronous serial with an RS232 format, except voltages are 0-Vcc. The output is an ASCII capital “R”, followed by three ASCII character digits representing the range in inches up to a maximum of 255, followed by a carriage return (ASCII 13). The baud rate is 9600, 8 bits, no parity, with one stop bit. Although the voltage of 0-Vcc is outside the RS232 standard, most RS232 devices have sufficient margin to read 0-Vcc serial data. If standard voltage level RS232 is desired, invert, and connect an RS232 converter such as a MAX232. When BW pin is held high the TX output sends a single pulse, suitable for low noise chaining. (no serial data)
Pin 6-+5V- Vcc – Operates on 2.5V - 5.5V. Recommended current capability of 3mA for 5V, and 2mA for 3V. Pin 7-GND- Return for the DC power supply. GND (& Vcc) must be ripple and noise free for best operation.


So we want:

Pin1: Held low (to indicate serial output).
Pin2: Ignored, unconnected (contains PWM output of sensor)
Pin3: Ignored, unconnected (contains analog output of sensor)
Pin4: Rx, polling pin. AAAHHHH I remember, the RX is the polling pin. Okay I get it now. So we can actually do:

Cat5 cable (positive part of pair) usages:

- Rx
- Tx
- Power
- Power

So we then have a maximum of 40 ohms in parallel, or 20 ohms, meaning that the maximum power draw is 156 * 2 or 312 milliwatts, which is EASILY enough - the cable range will be a fair bit longer than 1000ft! It scales linearly so assuming 250mW that's like 500 meters. I think that should be easily far enough.

Pin5: Tx, RS232 data from the sensor to the computer
Pin6: +Vcc
Pin7: GND


So to read all that using bonescript, I just do:

setup pin MUX
read/write to /dev/tty*

