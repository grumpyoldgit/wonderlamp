var osc = require('osc-min');
var dgram = require('dgram');

// Client object

var Client = function (host, port) {
	console.log("Opening UDP datagram client to host " + host + " on port " + port);
	this.host = host;
	this.port = port;
	this.sock = dgram.createSocket('udp4');
};

Client.prototype.kill = function () {
	this.sock.close();
};

Client.prototype.send = function(data) {
	this.sock.send(data, 0, data.length, this.port, this.host);
};

// Fader object

var Fader = function (host, port, channel) {
	this.channel = channel;
	this.client = new Client(host, port);
}

Fader.prototype.send = function(distanceInInches) {

	/* 
	midi values must be between 0 and 127. 
	*/

	if (distanceInInches/2 > 127) {
		console.log("***** distance in inches ***:" + distanceInInches);
	}

	var midiValue = 127 - (distanceInInches/2); // distance is max 255

	this.client.send(osc.toBuffer({address:'/midi', args: [
		// channel is the midi device (which will always be zero for this project)
		// status is the midi value for a given sensor
		// data1 is the "control change number" which corresponds to each sensor - we will start at 50
		// data2 is always b0 - probably corresponds to control change message type
		{type : "midi", value : { channel : 0, status: midiValue, data1: this.channel, data2: 0xb0 } }
	]}));
}

module.exports = {
	createFader: function(host, port, channel) {
		return new Fader(host, port, channel);
	}
}
