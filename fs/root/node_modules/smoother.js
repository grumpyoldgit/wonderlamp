// thanks http://stackoverflow.com/questions/1583123/circular-buffer-in-javascript !!

// Circular buffer storage. Externally-apparent 'length' increases indefinitely
// while any items with indexes below length-n will be forgotten (undefined
// will be returned if you try to get them, trying to set is an exception).
// n represents the initial length of the array, not a maximum

function CircularBuffer(n) {
    this._array= new Array(n);
    this.length= 0;
}
CircularBuffer.prototype.toString= function() {
    return '[object CircularBuffer('+this._array.length+') length '+this.length+']';
};
CircularBuffer.prototype.get= function(i) {
    if (i<0 || i<this.length-this._array.length)
        return undefined;
    return this._array[i%this._array.length];
};
CircularBuffer.prototype.set= function(i, v) {
    if (i<0 || i<this.length-this._array.length)
        throw CircularBuffer.IndexError;
    while (i>this.length) {
        this._array[this.length%this._array.length]= undefined;
        this.length++;
    }
    this._array[i%this._array.length]= v;
    if (i==this.length)
        this.length++;
};
CircularBuffer.IndexError= {};

var RING_BUFFER_SIZE = 30;

function createSmootherObject() {
    var s = [];
    s["buffer"] = new CircularBuffer(RING_BUFFER_SIZE);
    s["index"] = 0;
    return s;
}

function average(s) {
  var result = 0.0;

  // add up the CircularBuffer values
  for (var i=0; i<s.buffer._array.length; i++) {
    result += parseFloat(s.buffer.get(i));
  }
  // divide that by the length of the buffer
  result /= buffer._array.length;

  return round(result);
}

module.exports = {
  getOutput: function (s) {
    // calculate and return an average for the smoother s
    return average(s)
  },
  pushInput: function (s, v) { // s is a smoother created with newSmoother
    s.buffer.set(s.index,v);
    s.index++;
  },
  newSmoother: function() {
    return createSmootherObject();
  }
}